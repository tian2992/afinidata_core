# Generated by Django 2.2.10 on 2020-02-28 16:46

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.CharField(choices=[('cogni', 'Cognitivo & Lenguaje'), ('motor', 'Motor'), ('socio', 'Socioemocional')], max_length=35, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=140)),
            ],
        ),
        migrations.CreateModel(
            name='Componente',
            fields=[
                ('id', models.CharField(choices=[('vocabulario', 'Vocabulario'), ('articulacionfonetica', 'Articulación y Fonética'), ('sintaxiscomunicacion', 'Sintaxis/Comunicación'), ('lectoescritura', 'Lectoescritura'), ('literatura', 'Literatura'), ('autoconocimiento', 'Autoconocimiento'), ('autonomia', 'Autonomía y Vida Práctica'), ('autocontrol', 'Autocontrol'), ('empatia', 'Empatía'), ('hsocial', 'Habilidades Sociales'), ('plogico', 'Pensamiento Lógico'), ('numconteo', 'Números y Conteo'), ('problemasOperacionesRazonamiento', 'Resolución de Problemas y Operaciones / Razonamiento'), ('pVisual', 'Percepción Visual'), ('pAuditiva', 'Percepción Auditiva'), ('pHaptica', 'Percepción háptica'), ('pGustativa', 'Percepción Gustativa'), ('pOlfativa', 'Percepción Olfativa'), ('egnostico', 'Estereognóstico'), ('om', 'Coordinación Ojo-Mano'), ('pinza', 'Movimiento de Pinza'), ('desplaza', 'Desplazamiento'), ('balance', 'Balance-Equilibrio'), ('tono', 'Fuerza-Tonicidad Muscular'), ('coordinacion', 'Coordinación'), ('experimentos', 'Experimentos'), ('botanica', 'Botánica'), ('zoologia', 'Zoología'), ('astronomia', 'Astronomía'), ('cuidadomh', 'Cuidado del Medio Ambiente'), ('medionatural', 'Medio Natural'), ('tech', 'Tecnología'), ('geo', 'Geografía'), ('plasticas', 'Artes Plásticas'), ('musik', 'Música'), ('danzaTeatro', 'Danza y Teatro'), ('culturas', 'Culturas del Mundo')], max_length=35, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=140)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('draft', 'draft'), ('review', 'review'), ('rejected', 'rejected'), ('need_changes', 'need changes'), ('published', 'published')], default='draft', max_length=255)),
                ('type', models.CharField(choices=[('embeded', 'embeded'), ('youtube', 'youtube')], default='embeded', max_length=255)),
                ('content', models.TextField()),
                ('content_activity', models.TextField()),
                ('user', models.IntegerField(null=True)),
                ('min_range', models.IntegerField(default=0, null=True)),
                ('max_range', models.IntegerField(default=72, null=True)),
                ('preview', models.TextField()),
                ('new', models.BooleanField(default=False)),
                ('thumbnail', models.TextField()),
                ('area_id', models.IntegerField(default=1, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('replies', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.Post')),
            ],
        ),
        migrations.CreateModel(
            name='Subarea',
            fields=[
                ('id', models.CharField(choices=[('lang', 'Lenguaje'), ('soc', 'Socioemocional'), ('premath', 'Prematemática'), ('sensor', 'Sensorial'), ('motof', 'Motricidad Fina'), ('motol', 'Motricidad Gruesa'), ('sci', 'Ciencias'), ('art', 'Arte & Cultura')], max_length=35, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=140)),
            ],
        ),
        migrations.CreateModel(
            name='Tip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=140)),
                ('min_range', models.IntegerField(default=0, null=True)),
                ('max_range', models.IntegerField(default=72, null=True)),
                ('topic', models.CharField(max_length=255)),
                ('tip', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Taxonomy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='posts.Area')),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='posts.Componente')),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='posts.Post')),
                ('subarea', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='posts.Subarea')),
            ],
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('username', models.CharField(max_length=255)),
                ('response', models.TextField(null=True)),
                ('response_text', models.TextField(null=True)),
                ('response_value', models.IntegerField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.Question')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response', models.CharField(max_length=255)),
                ('value', models.IntegerField(choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)])),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.Question')),
            ],
        ),
        migrations.CreateModel(
            name='PostComplexity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('months', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('complexity', models.CharField(max_length=100)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.Post')),
            ],
        ),
        migrations.CreateModel(
            name='MessengerUserCommentPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='posts.Post')),
            ],
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('posts', models.ManyToManyField(to='posts.Post')),
            ],
        ),
        migrations.CreateModel(
            name='Interaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(default=0)),
                ('username', models.CharField(max_length=255, null=True)),
                ('channel_id', models.CharField(default='', max_length=50)),
                ('bot_id', models.IntegerField(default=1)),
                ('type', models.CharField(default='open', max_length=255)),
                ('value', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='posts.Post')),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(default=0)),
                ('username', models.CharField(max_length=255, null=True)),
                ('channel_id', models.CharField(default='', max_length=50)),
                ('bot_id', models.IntegerField(default=1)),
                ('value', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.Post')),
            ],
        ),
    ]
